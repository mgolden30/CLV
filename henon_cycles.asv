%{
Converge Cycles of Henon
%}


clear;

steps = 1e5; %take many steps
xs = zeros(2,steps);
xs(:,1) = [0;0;];
    h = @(x) [ 1 - 1.4*x(1)*x(1) + x(2); 0.3*x(1) ];
for i = 2:steps
  xs(:,i) = h( xs(:,i-1) );
end
scatter( xs(1,:), xs(2,:) );
drawnow;

r = 5e-2; %threshold for considering a close pass

for n = 16:20
    
  candidates = vecnorm( xs - circshift(xs,-n,2) ) < r;
  fprintf("Found %d candidates for cycles of length %d\n", sum(candidates), n);
  
  cycles = zeros(n,1);
  nc = 1; %num cycles
  tic;
  idx = find(candidates);
  for tr = 1:sum(candidates)
    if(idx(tr) + n - 1 >= steps)
      continue;
    end

    %x = 1.5*(2*rand(n,1) - 1);
    x = xs( 1, idx(tr) + (1:n) - 1 );
    x = x';
    [x,f] = newton(x);

    if (norm(f) < 1e-12) && is_distinct(x, cycles)
      cycles(:,nc) = x;
      nc = nc+1;
    end
  end
  time = toc;

  %Check for non-prime cycles
  d = divisors(n);
  nonprime = zeros(1,nc);
  for j = 1:numel(d)-1 %skip last element n
    for i = 1:nc-1
      c = cycles(:,i);
      if norm(c - circshift(c,d(j))) < 1e-10
        nonprime(i) = 1;
      end
    end
  end


  %kill nonprime cycles
  cycles(:, nonprime == 1) = [];

  fprintf("Found %d prime cycles of length %d in %f seconds.\n", size(cycles,2), n, time);
  save( "prime_cycles/"+n+".mat", "cycles" );

  hold on
  x = cycles;
  y = 0.3*circshift(cycles,-1,1);
  scatter( x, y, 'filled' );
  hold off
  drawnow
end




function bool = is_distinct(x, cycles)
  bool = true;
  f = @(x) [ sum(x); sum(x.^2); sum(x.^3) ];
  for i = 1:size(cycles,2)
    if norm( f(x) - f(cycles(:,i)) ) < 1e-7
      bool = false;
      return;
    end
  end
end

function [x,f] = newton(x)
  n = numel(x);
  maxit = 1024;
  for i = 1:maxit
    f = obj(x);
    %fprintf("%d: |f| = %e\n", i, norm(f) );
    if norm(f) < 1e-13
      break;
    end 

    J = zeros(n,n);
    for j = 1:n
      h = 1e-5;
      x2 =x; x2(j) = x2(j) + h;
      J(:,j) = (obj(x2) - f)/h;
    end

    [dx, ~] = lsqr( J, f );
    hook = 0.1;
    if norm(f) < 1e-3
      hook = 1;
    end
    x = x - hook*dx;
  end
end



function f = obj(x)
  a = 1.4;
  b = 0.3;
  f = circshift(x,1) - 1 + a*x.^2 - b*circshift(x,-1);
end